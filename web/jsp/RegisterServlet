package com.example.library;

import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.util.regex.Pattern;
import org.mindrot.jbcrypt.BCrypt; /*Implements password hashing for password encryption purposes, to use it, we need to download the jBCrypt library 
and add to the project in Apache NetBeans, thats the only way is works*/

@WebServlet(name = "RegisterServlet", urlPatterns = {"/RegisterServlet"})
public class RegisterServlet extends HttpServlet {

    private static final long serialVersionUID = 1L;
    private static final String DB_URL = "jdbc:postgresql://localhost:5432/LibrarySystemDB";
    private static final String DB_USER = "your_db_username";
    private static final String DB_PASSWORD = "your_db_password";

    // Validation of Email and Phone

    /* Email Validation:
      example@example.com: true
      user.name+tag@example.co.za: true
      invalid-email@: false
      @example.com: false
      user@.com: false
    */

  /*Phone Number Validation:
    1234567890: true
    123-456-7890: false
    123456789: false
    abcdefghij: false
    12345678901: false
  */
  
    private static final Pattern USERNAME_PATTERN = Pattern.compile("^[a-zA-Z0-9_]{3,20}$");
    private static final Pattern EMAIL_PATTERN = Pattern.compile("^[A-Za-z0-9+_.-]+@(.+)$");
    private static final Pattern PHONE_PATTERN = Pattern.compile("^\\d{10}$");

    protected void processRequest(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        String username = request.getParameter("username");
        String name = request.getParameter("name");
        String surname = request.getParameter("surname");
        String email = request.getParameter("email");
        String phone = request.getParameter("phone");
        String password = request.getParameter("password");

        // Input validation
        if (!isValidInput(username, name, surname, email, phone, password)) {
            response.sendRedirect("register.jsp?error=Invalid input. Please check your details.");
            return;
        }

        try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD)) {
            if (isUserExists(conn, username, email)) {
                response.sendRedirect("register.jsp?error=User with this username or email already exists");
            } else {
                String hashedPassword = BCrypt.hashpw(password, BCrypt.gensalt());
                registerUser(conn, username, hashedPassword, email, name, surname, phone);
                response.sendRedirect("login.jsp?success=Registration successful! Please login.");
            }
        } catch (SQLException e) {
            getServletContext().log("Database error during registration", e);
            response.sendRedirect("register.jsp?error=An error occurred during registration. Please try again later.");
        }
    }

    private boolean isValidInput(String username, String name, String surname, String email, String phone, String password) {
        return USERNAME_PATTERN.matcher(username).matches() &&
               name != null && !name.trim().isEmpty() &&
               surname != null && !surname.trim().isEmpty() &&
               EMAIL_PATTERN.matcher(email).matches() &&
               PHONE_PATTERN.matcher(phone).matches() &&
               password != null && password.length() >= 8;
    }

    private boolean isUserExists(Connection conn, String username, String email) throws SQLException {
        String checkUserQuery = "SELECT * FROM Login WHERE username=? OR email=?";
        try (PreparedStatement pst = conn.prepareStatement(checkUserQuery)) {
            pst.setString(1, username);
            pst.setString(2, email);
            try (ResultSet rs = pst.executeQuery()) {
                return rs.next();
            }
        }
    }

    private void registerUser(Connection conn, String username, String hashedPassword, String email, String name, String surname, String phone) throws SQLException {
        String insertQuery = "INSERT INTO Login(username, password, email, name, surname, phone) VALUES (?, ?, ?, ?, ?, ?)";
        try (PreparedStatement pst = conn.prepareStatement(insertQuery)) {
            pst.setString(1, username);
            pst.setString(2, hashedPassword);
            pst.setString(3, email);
            pst.setString(4, name);
            pst.setString(5, surname);
            pst.setString(6, phone);
            pst.executeUpdate();
        }
    }

    // <editor-fold defaultstate="collapsed" desc="HttpServlet methods. Click on the + sign on the left to edit the code.">
    /**
     * Handles the HTTP <code>GET</code> method.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        response.sendRedirect("register.jsp");  // Redirect GET requests to the registration page
    }

    /**
     * Handles the HTTP <code>POST</code> method.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        processRequest(request, response);
    }

    /**
     * Returns a short description of the servlet.
     *
     * @return a String containing servlet description
     */
    @Override
    public String getServletInfo() {
        return "RegisterServlet handles user registration for the library system";
    }// </editor-fold>
}
